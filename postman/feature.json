{
  "info": {
    "_postman_id": "a83304ca-1dcb-49b7-b699-4ed8d0cd72f2",
    "name": "Test Explore With Me - Feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26158223"
  },
  "item": [
    {
      "name": "Создание разрешенной зоны админом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Объект разрешенной зоны должен содержать поля: id, lon, lat, type, name\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('lon');\r",
              "pm.expect(target).to.have.property('lat');\r",
              "pm.expect(target).to.have.property('rad');\r",
              "pm.expect(target).to.have.property('type');\r",
              "pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.lon).equal(source.lon, 'Долгота центра зоны должна соответствовать долготе в запросе');\r",
              "    pm.expect(target.lat).equal(source.lat, 'Широта центра зоны должна соответствовать широте в запросе');\r",
              "    pm.expect(target.rad).equal(source.rad, 'Радиус разрешенной зоны должен соответствовать радиусу в запросе');\r",
              "    pm.expect(target.type).equal(source.type, 'Тип разрешенной зоны должен соответствовать типу в запросе');\r",
              "    pm.expect(target.name).equal(source.name, 'Название разрешенной зоны должно соответствовать названию в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"lon\": {{lon}},\r\n    \"lat\": {{lat}},\r\n    \"rad\": {{rad}},\r\n    \"type\": \"PARK\",\r\n    \"name\": \"Сквер имени Немцова\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/locations",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "locations"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавления события с числом участников больше 1000 в разрешенной зоне",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        event = rnd.getEvent(category.id);\r",
              "        event.participantLimit = 1001;\r",
              "        event.location = {\r",
              "            lat: pm.variables.replaceIn('{{lat}}') - 0.0003,\r",
              "            lon: pm.variables.replaceIn('{{lon}}') - 0.0003\r",
              "        };\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
              "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
              "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
              "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
              "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
              "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
              "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
              "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
              "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{{request_body}}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{uid}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление события с числом участников больше 1000 вне разрешенной зоны",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    let event;\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"uid\", user.id)\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        event = rnd.getEvent(category.id);\r",
              "        event.participantLimit = 1001;\r",
              "        event.location = {\r",
              "            lat: pm.variables.replaceIn('{{lat}}') - 0.3,\r",
              "            lon: pm.variables.replaceIn('{{lon}}') - 0.3\r",
              "        };\r",
              "        \r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "\r",
              "    pm.request.body.update({\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify(event),\r",
              "        options: { raw: { language: 'json' } }\r",
              "    });\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:userId/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": null
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение списка событий в пределах указанной зоны",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = rnd.getEvent(category.id);\r",
              "        event.location = {\r",
              "            lat: pm.variables.replaceIn('{{lat}}') - 0.0007,\r",
              "            lon: pm.variables.replaceIn('{{lon}}') - 0.0007\r",
              "        };\r",
              "        await api.addEvent(user.id, event);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const target = pm.response.json();\r",
              "console.log(target)\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration, views\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('title');\r",
              "pm.expect(target[0]).to.have.property('annotation');\r",
              "pm.expect(target[0]).to.have.property('category');\r",
              "pm.expect(target[0]).to.have.property('paid');\r",
              "pm.expect(target[0]).to.have.property('eventDate');\r",
              "pm.expect(target[0]).to.have.property('initiator');\r",
              "pm.expect(target[0]).to.have.property('description');\r",
              "pm.expect(target[0]).to.have.property('participantLimit');\r",
              "pm.expect(target[0]).to.have.property('state');\r",
              "pm.expect(target[0]).to.have.property('createdOn');\r",
              "pm.expect(target[0]).to.have.property('location');\r",
              "pm.expect(target[0]).to.have.property('requestModeration');\r",
              "pm.expect(target[0]).to.have.property('views');\r",
              "pm.expect(target[1]).to.have.property('id');\r",
              "pm.expect(target[1]).to.have.property('title');\r",
              "pm.expect(target[1]).to.have.property('annotation');\r",
              "pm.expect(target[1]).to.have.property('category');\r",
              "pm.expect(target[1]).to.have.property('paid');\r",
              "pm.expect(target[1]).to.have.property('eventDate');\r",
              "pm.expect(target[1]).to.have.property('initiator');\r",
              "pm.expect(target[1]).to.have.property('description');\r",
              "pm.expect(target[1]).to.have.property('participantLimit');\r",
              "pm.expect(target[1]).to.have.property('state');\r",
              "pm.expect(target[1]).to.have.property('createdOn');\r",
              "pm.expect(target[1]).to.have.property('location');\r",
              "pm.expect(target[1]).to.have.property('requestModeration');\r",
              "pm.expect(target[1]).to.have.property('views');\r",
              "});\r",
              "\r",
              "pm.test(\"В ответе должно быть 2 записи\", function () {\r",
              "    pm.expect(target.length).to.equal(2);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/locations?longitude={{lon}}&latitude={{lat}}&radius={{rad}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            "locations"
          ],
          "query": [
            {
              "key": "longitude",
              "value": "{{lon}}"
            },
            {
              "key": "latitude",
              "value": "{{lat}}"
            },
            {
              "key": "radius",
              "value": "{{rad}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение существующей разрешенной локации по id",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Объект разрешенной зоны должен содержать поля: id, lon, lat, type, name\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('lon');\r",
              "pm.expect(target).to.have.property('lat');\r",
              "pm.expect(target).to.have.property('rad');\r",
              "pm.expect(target).to.have.property('type');\r",
              "pm.expect(target).to.have.property('name');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/locations/allowed/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "locations",
            "allowed",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение несуществующей разрешенной локации по id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/locations/allowed/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "locations",
            "allowed",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "9999"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение списка всех разрешенных локаций",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const target = pm.response.json();\r",
              "console.log(target)\r",
              "pm.test(\"Разрешенная локация должна содержать поля: id, lon, lat, rad, type, name\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('lon');\r",
              "pm.expect(target[0]).to.have.property('lat');\r",
              "pm.expect(target[0]).to.have.property('rad');\r",
              "pm.expect(target[0]).to.have.property('type');\r",
              "pm.expect(target[0]).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"В ответе должна быть 1 запись\", function () {\r",
              "    pm.expect(target.length).to.equal(1);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/locations/allowed",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "locations",
            "allowed"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление админом существующей разрешенной локации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Объект разрешенной зоны должен содержать поля: id, lon, lat, type, name\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('lon');\r",
              "pm.expect(target).to.have.property('lat');\r",
              "pm.expect(target).to.have.property('rad');\r",
              "pm.expect(target).to.have.property('type');\r",
              "pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.lon).equal(source.lon, 'Долгота центра зоны должна соответствовать долготе в запросе');\r",
              "    pm.expect(target.lat).equal(source.lat, 'Широта центра зоны должна соответствовать широте в запросе');\r",
              "    pm.expect(target.rad).equal(source.rad, 'Радиус разрешенной зоны должен соответствовать радиусу в запросе');\r",
              "    pm.expect(target.type).equal(source.type, 'Тип разрешенной зоны должен соответствовать типу в запросе');\r",
              "    pm.expect(target.name).equal(source.name, 'Название разрешенной зоны должно соответствовать названию в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"lon\": {{lon}},\r\n    \"lat\": {{lat}},\r\n    \"rad\": {{rad}},\r\n    \"type\": \"PUBLIC_SQUARE\",\r\n    \"name\": \"Площадь 400 лет\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/locations/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "locations",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление админом несуществующей разрешенной локации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"lon\": {{lon}},\r\n    \"lat\": {{lat}},\r\n    \"rad\": {{rad}},\r\n    \"type\": \"PUBLIC_SQUARE\",\r\n    \"name\": \"Площадь 400 лет\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/loations/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "loations",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "9999"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление админом разрешенной локации к которой привязаны события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(409);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/locations/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "locations",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "lon",
      "value": "33.3333",
      "type": "string"
    },
    {
      "key": "lat",
      "value": "66.6666",
      "type": "string"
    },
    {
      "key": "rad",
      "value": "300.0",
      "type": "string"
    },
    {
      "key": "uid",
      "value": ""
    }
  ]
}